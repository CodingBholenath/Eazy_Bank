package com.eazyBank.accounts.service.Impl;

import com.eazyBank.accounts.constants.AccountsConstants;
import com.eazyBank.accounts.dto.AccountsDto;
import com.eazyBank.accounts.dto.CustomerDto;
import com.eazyBank.accounts.entity.Accounts;
import com.eazyBank.accounts.entity.Customer;
import com.eazyBank.accounts.exception.CustomerAlreadyExistsException;
import com.eazyBank.accounts.exception.ResouceNotFoundException;
import com.eazyBank.accounts.mapper.AccountsMapper;
import com.eazyBank.accounts.mapper.CustomerMapper;
import com.eazyBank.accounts.repository.AccountRepository;
import com.eazyBank.accounts.repository.CustomerRepository;
import com.eazyBank.accounts.service.IAccountsService;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Service;

import javax.swing.text.html.Option;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Random;

@Service
@AllArgsConstructor
public class AccountsServiceImpl  implements IAccountsService {
private AccountRepository accountRepository;
private CustomerRepository customerRepository;

    @Override
    public void createAccount(CustomerDto customerDto) {
Customer customer= CustomerMapper.mapToCustomer(customerDto, new Customer());
Optional<Customer> optionalCustomer=customerRepository.findByMobileNumber(customerDto.getMobileNumber());
if(optionalCustomer.isPresent())
    throw new CustomerAlreadyExistsException("Customer already exists with the given mobile number"+customerDto.getMobileNumber()); //customer already exists(Optional)
customer.setCreatedAt(LocalDateTime.now());
        customer.setCreatedBy("Anonymous");
        Customer savedCustomer=customerRepository.save(customer);
accountRepository.save(createNewAccount(savedCustomer));
    }



    /**
     * @param customer - Customer Object
     * @return the new account details
     */
    private Accounts createNewAccount(Customer customer) {
        Accounts newAccount = new Accounts();
        newAccount.setCustomerId(customer.getCustomerId());
        long randomAccNumber = 1000000000L + new Random().nextInt(900000000);

        newAccount.setAccountNumber(randomAccNumber);
        newAccount.setAccountType(AccountsConstants.SAVINGS);
        newAccount.setBranchAddress(AccountsConstants.ADDRESS);
        newAccount.setCreatedAt(LocalDateTime.now());
        newAccount.setCreatedBy("Anonymous");
        return newAccount;
    }
    @Override
    public CustomerDto fetchAccount(String mobileNumber) {
     Customer customer=  customerRepository.findByMobileNumber(mobileNumber).orElseThrow(
               ()->new ResouceNotFoundException("Customer","Mobile Number",mobileNumber)
       );
     Accounts accounts=accountRepository.findByCustomerId(customer.getCustomerId()).orElseThrow(
             ()->new ResouceNotFoundException("Account","customerId",customer.getCustomerId().toString())
     );
     CustomerDto customerDto=  CustomerMapper.mapToCustomerDto(customer,new CustomerDto());
      customerDto.setAccountsDto(AccountsMapper.mapToAccountsDto(accounts,new AccountsDto()));
        return customerDto;
    }

    @Override
    public boolean updateAccount(CustomerDto customerDto) {
      boolean isUpdated=false;
      AccountsDto accountsDto=customerDto.getAccountsDto();

      if(accountsDto!=null) {
          Accounts accounts = accountRepository.findById(accountsDto.getAccountNumber()).orElseThrow(
                  () -> new ResouceNotFoundException("Accounts", "AccountNumber", accountsDto.getAccountNumber().toString())

          );
          AccountsMapper.mapToAccounts(accountsDto, accounts);
          accounts = accountRepository.save(accounts);

          Long customerId = accounts.getCustomerId();
          Customer customer = customerRepository.findById(customerId).orElseThrow(
                  () -> new ResouceNotFoundException("Customer", "CustomerId", customerId.toString())
          );
          CustomerMapper.mapToCustomer(customerDto, customer);
          customerRepository.save(customer);
          isUpdated = true;
      }
          return isUpdated;



    }

    @Override
    public boolean deleteAccount(String mobileNumber) {
        Customer customer=customerRepository.findByMobileNumber(mobileNumber).orElseThrow(
                ()->new ResouceNotFoundException("Customer","mobileNumber",mobileNumber)
        );
        //since customer id is not primary key in account table we have to write this method inside account repository
        accountRepository.deleteByCustomerId(customer.getCustomerId());
        customerRepository.deleteById(customer.getCustomerId());

        return true;
    }

}
